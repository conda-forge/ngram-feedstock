From f31114c115e15d7d5a4ff33e2bf7248eb22898ef Mon Sep 17 00:00:00 2001
From: Michael McAuliffe <michael.e.mcauliffe@gmail.com>
Date: Fri, 26 Jan 2024 12:03:27 -0800
Subject: [PATCH] Add CMake files

---
 CMakeLists.txt                    | 37 ++++++++++++++++++
 src/CMakeLists.txt                | 11 ++++++
 src/bin/CMakeLists.txt            | 53 +++++++++++++++++++++++++
 src/bin/ngramcount-main.cc        | 11 +++++-
 src/bin/ngraminfo-main.cc         | 11 +++++-
 src/bin/ngramperplexity-main.cc   | 11 +++++-
 src/bin/ngramprint-main.cc        | 11 +++++-
 src/bin/ngramrandgen-main.cc      |  4 ++
 src/bin/ngramrandgen.cc           |  4 ++
 src/bin/ngramread-main.cc         | 18 ++++++++-
 src/bin/ngramread.cc              |  4 +-
 src/bin/ngramsymbols-main.cc      | 18 ++++++++-
 src/include/ngram/ngram-randgen.h |  4 ++
 src/lib/CMakeLists.txt            | 65 +++++++++++++++++++++++++++++++
 src/lib/ngram-context.cc          | 18 ++++++++-
 src/lib/ngram-output.cc           |  5 ++-
 src/test/CMakeLists.txt           | 42 ++++++++++++++++++++
 src/test/ngramhisttest-main.cc    |  9 +++++
 src/test/ngramrandtest.cc         |  4 ++
 19 files changed, 326 insertions(+), 14 deletions(-)
 create mode 100644 CMakeLists.txt
 create mode 100644 src/CMakeLists.txt
 create mode 100644 src/bin/CMakeLists.txt
 create mode 100644 src/lib/CMakeLists.txt
 create mode 100644 src/test/CMakeLists.txt

diff --git CMakeLists.txt CMakeLists.txt
new file mode 100644
index 0000000..29591c3
--- /dev/null
+++ CMakeLists.txt
@@ -0,0 +1,37 @@
+project(ngram)
+cmake_minimum_required(VERSION 3.18)
+
+include(GNUInstallDirs)
+include(GenerateExportHeader)
+set(CMAKE_MACOSX_RPATH 1)
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_EXTENSIONS OFF)
+option(BUILD_SHARED_LIBS "Build shared libraries" ON)
+option(NGRAM_BUILD_TEST "Build ngram tests" OFF)
+
+include_directories(${CMAKE_PREFIX_PATH}/include)
+link_directories(${CMAKE_PREFIX_PATH}/lib)
+
+set(CMAKE_POSITION_INDEPENDENT_CODE ON)
+if (MSVC)
+    find_package(dlfcn-win32 REQUIRED)
+    set(CMAKE_DL_LIBS dlfcn-win32::dl)
+    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)
+    add_definitions(-DWIN32_LEAN_AND_MEAN)
+    add_definitions(-DNOMINMAX)
+    add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
+    add_definitions(-D_USE_MATH_DEFINES)
+    add_compile_options(/permissive- /FS /wd4819 /EHsc /bigobj)
+
+    # some warnings related with fst
+    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4291 /wd4305)
+endif (MSVC)
+
+set(SOVERSION "1314")
+
+if (NGRAM_BUILD_TEST)
+    include(CTest)
+    enable_testing()
+endif()
+
+add_subdirectory(src)
diff --git src/CMakeLists.txt src/CMakeLists.txt
new file mode 100644
index 0000000..c8c3d8d
--- /dev/null
+++ src/CMakeLists.txt
@@ -0,0 +1,11 @@
+include_directories(./include/)
+install(DIRECTORY include/ DESTINATION include/
+        FILES_MATCHING PATTERN "*.h")
+
+add_subdirectory(lib)
+
+add_subdirectory(bin)
+
+if (${NGRAM_BUILD_TEST})
+add_subdirectory(test)
+endif()
\ No newline at end of file
diff --git src/bin/CMakeLists.txt src/bin/CMakeLists.txt
new file mode 100644
index 0000000..d11f3c1
--- /dev/null
+++ src/bin/CMakeLists.txt
@@ -0,0 +1,53 @@
+function (add_executable2 _name)
+    add_executable(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} ngram fstfarscript fstfar fstscript fstlinearscript fst ${CMAKE_DL_LIBS})
+        set_target_properties(${_name} PROPERTIES FOLDER bin)
+    endif()
+
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+endfunction()
+
+function (add_executable2_hist _name)
+    add_executable(${ARGV})
+    if (TARGET ${_name})
+        target_link_libraries(${_name} ngramhist ngram fstfarscript fstfar fstscript fstlinearscript fst ${CMAKE_DL_LIBS})
+        set_target_properties(${_name} PROPERTIES FOLDER bin)
+    endif()
+
+    install(TARGETS ${_name} RUNTIME DESTINATION bin)
+endfunction()
+
+include_directories(../include)
+
+add_executable2(ngramapply ngramapply-main.cc ngramapply.cc)
+
+add_executable2(ngramcontext ngramcontext-main.cc ngramcontext.cc)
+
+add_executable2_hist(ngramcount ngramcount-main.cc ngramcount.cc)
+
+add_executable2(ngraminfo ngraminfo-main.cc ngraminfo.cc)
+
+add_executable2_hist(ngrammake ngrammake-main.cc ngrammake.cc)
+
+add_executable2(ngrammarginalize ngrammarginalize-main.cc ngrammarginalize.cc)
+
+add_executable2_hist(ngrammerge ngrammerge-main.cc ngrammerge.cc)
+
+add_executable2(ngramperplexity ngramperplexity-main.cc ngramperplexity.cc)
+
+add_executable2(ngramprint ngramprint-main.cc ngramprint.cc)
+
+add_executable2(ngramrandgen ngramrandgen-main.cc ngramrandgen.cc)
+
+add_executable2(ngramread ngramread-main.cc ngramread.cc)
+
+add_executable2(ngramshrink ngramshrink-main.cc ngramshrink.cc)
+
+add_executable2(ngramsort ngramsort-main.cc ngramsort.cc)
+
+add_executable2_hist(ngramsplit ngramsplit-main.cc ngramsplit.cc)
+
+add_executable2(ngramsymbols ngramsymbols-main.cc ngramsymbols.cc)
+
+add_executable2_hist(ngramtransfer ngramtransfer-main.cc ngramtransfer.cc)
diff --git src/bin/ngramcount-main.cc src/bin/ngramcount-main.cc
index 585322b..3cb1733 100644
--- src/bin/ngramcount-main.cc
+++ src/bin/ngramcount-main.cc
@@ -22,6 +22,10 @@
 #include <ostream>
 #include <string>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#include <fcntl.h>
+#endif
 
 #include <fst/flags.h>
 #include <fst/log.h>
@@ -96,12 +100,17 @@ int ngramcount_main(int argc, char **argv) {
           FST_FLAGS_add_to_symbol_unigram_count);
       std::ofstream ofstrm;
       if (!out_name.empty()) {
-        ofstrm.open(out_name);
+        ofstrm.open(out_name, std::ios_base::out | std::ios_base::binary);
         if (!ofstrm) {
           LOG(ERROR) << "GetNGramCounts: Open failed, file = " << out_name;
           return 1;
         }
       }
+      #ifdef _WIN32
+      if (!ofstrm.is_open()) {
+          _setmode(_fileno(stdout), _O_BINARY);
+      }
+      #endif
       std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
       for (size_t i = 0; i < ngram_counts.size(); ++i)
         ostrm << ngram_counts[i] << std::endl;
diff --git src/bin/ngraminfo-main.cc src/bin/ngraminfo-main.cc
index cf4108b..0784e27 100644
--- src/bin/ngraminfo-main.cc
+++ src/bin/ngraminfo-main.cc
@@ -24,6 +24,10 @@
 #include <sstream>
 #include <string>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#include <fcntl.h>
+#endif
 
 #include <fst/flags.h>
 #include <fst/arc.h>
@@ -114,12 +118,17 @@ int ngraminfo_main(int argc, char **argv) {
 
   std::ofstream ofstrm;
   if (argc > 2 && (strcmp(argv[2], "-") != 0)) {
-    ofstrm.open(argv[2]);
+    ofstrm.open(argv[2], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed, file = " << argv[2];
       return 1;
     }
   }
+  #ifdef _WIN32
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
+  #endif
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
   ngram::NGramModel<fst::StdArc> ngram(
       *fst, 0, FST_FLAGS_norm_eps,
diff --git src/bin/ngramperplexity-main.cc src/bin/ngramperplexity-main.cc
index df1a323..3354aca 100644
--- src/bin/ngramperplexity-main.cc
+++ src/bin/ngramperplexity-main.cc
@@ -22,6 +22,10 @@
 #include <ostream>
 #include <string>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#include <fcntl.h>
+#endif
 
 #include <fst/flags.h>
 #include <fst/extensions/far/far.h>
@@ -61,12 +65,17 @@ int ngramperplexity_main(int argc, char **argv) {
 
   std::ofstream ofstrm;
   if (argc > 3 && (strcmp(argv[3], "-") != 0)) {
-    ofstrm.open(argv[3]);
+    ofstrm.open(argv[3], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed, file = " << argv[3];
       return 1;
     }
   }
+  #ifdef _WIN32
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
+  #endif
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
 
   ngram::NGramOutput ngram(fst.get(), ostrm, 0, false,
diff --git src/bin/ngramprint-main.cc src/bin/ngramprint-main.cc
index 14c8543..5d22f63 100644
--- src/bin/ngramprint-main.cc
+++ src/bin/ngramprint-main.cc
@@ -21,6 +21,10 @@
 #include <memory>
 #include <ostream>
 #include <string>
+#ifdef _WIN32
+#include <io.h>
+#include <fcntl.h>
+#endif
 
 #include <fst/flags.h>
 #include <fst/mutable-fst.h>
@@ -68,12 +72,17 @@ int ngramprint_main(int argc, char **argv) {
 
   std::ofstream ofstrm;
   if (argc > 2 && (strcmp(argv[2], "-") != 0)) {
-    ofstrm.open(argv[2]);
+    ofstrm.open(argv[2], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed, file = " << argv[2];
       return 1;
     }
   }
+  #ifdef _WIN32
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
+  #endif
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
 
   ngram::NGramOutput ngram(fst.get(), ostrm, FST_FLAGS_backoff_label,
diff --git src/bin/ngramrandgen-main.cc src/bin/ngramrandgen-main.cc
index cb88c3b..97e5c55 100644
--- src/bin/ngramrandgen-main.cc
+++ src/bin/ngramrandgen-main.cc
@@ -16,7 +16,11 @@
 // Generates random sentences from an LM or more generally paths through any
 // FST where epsilons are treated as failure transitions.
 
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <cstring>
 #include <memory>
diff --git src/bin/ngramrandgen.cc src/bin/ngramrandgen.cc
index f15836a..eafc427 100644
--- src/bin/ngramrandgen.cc
+++ src/bin/ngramrandgen.cc
@@ -13,7 +13,11 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 //
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <climits>
 #include <ctime>
diff --git src/bin/ngramread-main.cc src/bin/ngramread-main.cc
index ae6fa57..c653d14 100644
--- src/bin/ngramread-main.cc
+++ src/bin/ngramread-main.cc
@@ -21,6 +21,10 @@
 #include <istream>
 #include <ostream>
 #include <string>
+#ifdef _WIN32
+#include <io.h>
+#include <fcntl.h>
+#endif
 
 #include <fst/flags.h>
 #include <ngram/ngram-input.h>
@@ -46,22 +50,32 @@ int ngramread_main(int argc, char **argv) {
 
   std::ifstream ifstrm;
   if (argc > 1 && (strcmp(argv[1], "-") != 0)) {
-    ifstrm.open(argv[1]);
+    ifstrm.open(argv[1], std::ios_base::in | std::ios_base::binary);
     if (!ifstrm) {
       LOG(ERROR) << argv[0] << ": Open failed: " << argv[1];
       return 1;
     }
   }
+  #ifdef _WIN32
+  if (!ifstrm.is_open()) {
+      _setmode(_fileno(stdin), _O_BINARY);
+  }
+  #endif
   std::istream &istrm = ifstrm.is_open() ? ifstrm : std::cin;
 
   std::ofstream ofstrm;
   if (argc > 2 && (strcmp(argv[2], "-") != 0)) {
-    ofstrm.open(argv[2]);
+    ofstrm.open(argv[2], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed: " << argv[2];
       return 1;
     }
   }
+  #ifdef _WIN32
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
+  #endif
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
 
   ngram::NGramInput input(
diff --git src/bin/ngramread.cc src/bin/ngramread.cc
index e6f5d38..2167025 100644
--- src/bin/ngramread.cc
+++ src/bin/ngramread.cc
@@ -23,8 +23,8 @@ DEFINE_bool(renormalize_arpa, false,
 DEFINE_string(symbols, "", "Label symbol table");
 DEFINE_string(epsilon_symbol, "<epsilon>", "Label for epsilon transitions");
 DEFINE_string(OOV_symbol, "<UNK>", "Class label for OOV symbols");
-DECLARE_string(start_symbol);  // defined in ngram-output.cc
-DECLARE_string(end_symbol);    // defined in ngram-output.cc
+DEFINE_string(start_symbol, "<s>", "Start of sentence symbol");
+DEFINE_string(end_symbol, "</s>", "End of sentence symbol");
 
 int ngramread_main(int argc, char** argv);
 int main(int argc, char** argv) {
diff --git src/bin/ngramsymbols-main.cc src/bin/ngramsymbols-main.cc
index e8cf854..6f0fec3 100644
--- src/bin/ngramsymbols-main.cc
+++ src/bin/ngramsymbols-main.cc
@@ -21,6 +21,10 @@
 #include <istream>
 #include <ostream>
 #include <string>
+#ifdef _WIN32
+#include <io.h>
+#include <fcntl.h>
+#endif
 
 #include <fst/flags.h>
 #include <ngram/ngram-input.h>
@@ -41,22 +45,32 @@ int ngramsymbols_main(int argc, char **argv) {
 
   std::ifstream ifstrm;
   if (argc > 1 && (strcmp(argv[1], "-") != 0)) {
-    ifstrm.open(argv[1]);
+    ifstrm.open(argv[1], std::ios_base::in | std::ios_base::binary);
     if (!ifstrm) {
       LOG(ERROR) << argv[0] << ": Open failed: " << argv[1];
       return 1;
     }
   }
+  #ifdef _WIN32
+  if (!ifstrm.is_open()) {
+      _setmode(_fileno(stdin), _O_BINARY);
+  }
+  #endif
   std::istream &istrm = ifstrm.is_open() ? ifstrm : std::cin;
 
   std::ofstream ofstrm;
   if (argc > 2 && (strcmp(argv[2], "-") != 0)) {
-    ofstrm.open(argv[2]);
+    ofstrm.open(argv[2], std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << argv[0] << ": Open failed: " << argv[2];
       return 1;
     }
   }
+  #ifdef _WIN32
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
+  #endif
   std::ostream &ostrm = ofstrm.is_open() ? ofstrm : std::cout;
 
   ngram::NGramInput input(istrm, ostrm, /*symbols=*/"",
diff --git src/include/ngram/ngram-randgen.h src/include/ngram/ngram-randgen.h
index b5e7a42..076d6e5 100644
--- src/include/ngram/ngram-randgen.h
+++ src/include/ngram/ngram-randgen.h
@@ -20,7 +20,11 @@
 #define NGRAM_NGRAM_RANDGEN_H_
 
 #include <sys/types.h>
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <ctime>
 #include <map>
diff --git src/lib/CMakeLists.txt src/lib/CMakeLists.txt
new file mode 100644
index 0000000..2069108
--- /dev/null
+++ src/lib/CMakeLists.txt
@@ -0,0 +1,65 @@
+
+
+add_library(ngram
+SHARED
+ngram-absolute.cc 
+ngram-context.cc
+ngram-count.cc
+ngram-count-prune.cc
+ngram-input.cc
+ngram-kneser-ney.cc
+ngram-list-prune.cc
+ngram-make.cc
+ngram-marginalize.cc
+ngram-output.cc
+ngram-shrink.cc
+util.cc
+)
+GENERATE_EXPORT_HEADER( ngram
+           BASE_NAME ngram
+           EXPORT_MACRO_NAME ngram_EXPORT
+           EXPORT_FILE_NAME ${CMAKE_BINARY_DIR}/include/ngram/ngram_Export.h
+           STATIC_DEFINE ngram_BUILT_AS_STATIC
+)
+set_target_properties(ngram PROPERTIES
+SOVERSION "${SOVERSION}"
+)
+target_include_directories(ngram PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_include_directories(ngram PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_link_libraries(ngram fst fstscript fstlinearscript ${CMAKE_DL_LIBS})
+
+
+
+install(TARGETS ngram
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
+install(FILES
+${CMAKE_BINARY_DIR}/include/ngram/ngram_Export.h DESTINATION include/ngram
+)
+
+
+
+add_library(ngramhist
+SHARED
+hist-arc.cc
+)
+set_target_properties(ngramhist PROPERTIES
+SOVERSION "${SOVERSION}"
+)
+target_include_directories(ngramhist PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_include_directories(ngramhist PUBLIC $<BUILD_INTERFACE:${CMAKE_BINARY_DIR}/include>
+                         $<INSTALL_INTERFACE:include>)
+target_link_libraries(ngramhist fst fstscript ${CMAKE_DL_LIBS})
+
+
+
+install(TARGETS ngramhist
+LIBRARY DESTINATION lib
+ARCHIVE DESTINATION lib
+RUNTIME DESTINATION bin
+)
\ No newline at end of file
diff --git src/lib/ngram-context.cc src/lib/ngram-context.cc
index a2fe8b7..aa5dbc7 100644
--- src/lib/ngram-context.cc
+++ src/lib/ngram-context.cc
@@ -28,6 +28,10 @@
 #include <string>
 #include <utility>
 #include <vector>
+#ifdef _WIN32
+#include <io.h>
+#include <fcntl.h>
+#endif
 
 #include <fst/arc.h>
 #include <fst/util.h>
@@ -282,11 +286,16 @@ bool NGramReadContexts(const std::string &file,
                        std::vector<std::string> *contexts) {
   contexts->clear();
   std::ifstream fstrm;
-  fstrm.open(file);
+  fstrm.open(file, std::ios_base::in | std::ios_base::binary);
   if (!fstrm) {
     LOG(ERROR) << "NGramReadContexts: Can't open file: " << file;
     return false;
   }
+  #ifdef _WIN32
+  if (!fstrm.is_open()) {
+      _setmode(_fileno(stdin), _O_BINARY);
+  }
+  #endif
   std::istream &strm = fstrm.is_open() ? fstrm : std::cin;
   std::string line;
   while (std::getline(strm, line)) contexts->push_back(line);
@@ -297,12 +306,17 @@ bool NGramWriteContexts(const std::string &file,
                         const std::vector<std::string> &contexts) {
   std::ofstream ofstrm;
   if (!file.empty()) {
-    ofstrm.open(file);
+    ofstrm.open(file, std::ios_base::out | std::ios_base::binary);
     if (!ofstrm) {
       LOG(ERROR) << "NGramWriteContexts: Can't create file: " << file;
       return false;
     }
   }
+  #ifdef _WIN32
+  if (!ofstrm.is_open()) {
+      _setmode(_fileno(stdout), _O_BINARY);
+  }
+  #endif
   std::ostream &strm = ofstrm.is_open() ? ofstrm : std::cout;
   for (int i = 0; i < contexts.size(); ++i) strm << contexts[i] << std::endl;
   return true;
diff --git src/lib/ngram-output.cc src/lib/ngram-output.cc
index be05bb6..3b224f9 100644
--- src/lib/ngram-output.cc
+++ src/lib/ngram-output.cc
@@ -34,9 +34,10 @@
 #include <fst/mutable-fst.h>
 #include <fst/vector-fst.h>
 #include <ngram/util.h>
+#include <fst/exports/exports.h>
 
-DEFINE_string(start_symbol, "<s>", "Class label for sentence start");
-DEFINE_string(end_symbol, "</s>", "Class label for sentence end");
+DECLARE_export_string(start_symbol, fst_EXPORT);
+DECLARE_export_string(end_symbol, fst_EXPORT);
 
 namespace ngram {
 
diff --git src/test/CMakeLists.txt src/test/CMakeLists.txt
new file mode 100644
index 0000000..9342abe
--- /dev/null
+++ src/test/CMakeLists.txt
@@ -0,0 +1,42 @@
+add_executable(ngramhisttest
+ngramhisttest.cc
+ngramhisttest-main.cc
+        )
+target_link_libraries(ngramhisttest fst fstfar fstscript ngram ngramhist ${CMAKE_DL_LIBS})
+set_target_properties(ngramhisttest PROPERTIES FOLDER test)
+if (MSVC)
+elseif (APPLE)
+        set_target_properties(ngramhisttest 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else() 
+        set_target_properties(ngramhisttest 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME ngramhisttest-test COMMAND ngramhisttest)
+
+add_executable(ngramrandtest
+ngramrandtest.cc
+ngramrandtest-main.cc
+        )
+target_link_libraries(ngramrandtest fst fstfar ngram ${CMAKE_DL_LIBS})
+if (MSVC)
+elseif (APPLE)
+        set_target_properties(ngramrandtest 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "DYLD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+else()
+        set_target_properties(ngramrandtest 
+                PROPERTIES 
+                        FOLDER test 
+                        ENVIRONMENT "LD_LIBRARY_PATH=${CMAKE_BINARY_DIR}/src/lib;${CMAKE_INSTALL_PREFIX}/lib"
+        )
+endif()
+add_test(NAME ngramrandtest-test COMMAND ngramrandtest)
\ No newline at end of file
diff --git src/test/ngramhisttest-main.cc src/test/ngramhisttest-main.cc
index 7ec62ab..f84405e 100644
--- src/test/ngramhisttest-main.cc
+++ src/test/ngramhisttest-main.cc
@@ -21,6 +21,10 @@
 #include <istream>
 #include <memory>
 #include <string>
+#ifdef _WIN32
+#include <io.h>
+#include <fcntl.h>
+#endif
 
 #include <fst/log.h>
 #include <fst/symbol-table.h>
@@ -78,6 +82,11 @@ int ngramhisttest_main(int argc, char **argv) {
                  << ": Open failed, file = " << FST_FLAGS_ifile;
       return 1;
     }
+  #ifdef _WIN32
+  if (!fstrm.is_open()) {
+      _setmode(_fileno(stdin), _O_BINARY);
+  }
+  #endif
     std::istream &istrm = fstrm.is_open() ? fstrm : std::cin;
     fst::script::Compile(
         istrm, FST_FLAGS_ifile, FST_FLAGS_ofile, "vector",
diff --git src/test/ngramrandtest.cc src/test/ngramrandtest.cc
index 93a5422..19a2d8b 100644
--- src/test/ngramrandtest.cc
+++ src/test/ngramrandtest.cc
@@ -13,7 +13,11 @@
 // See the License for the specific language governing permissions and
 // limitations under the License.
 //
+#ifdef _WIN32
+#include <io.h>         // for _get_osfhandle, _open
+#else
 #include <unistd.h>
+#endif  // _WIN32
 
 #include <ctime>
 
-- 
2.33.0.windows.1

